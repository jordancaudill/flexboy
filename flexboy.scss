// $flexboy: ( breakpoints: (md: 1280px, lg: 1600px), containers: (default: 600px, md: 900px, lg: 1200px), disableDefaultMargins: false, colors: (myRed: red, myBlue: blue), fonts: (poppy: (400, 700, 900)));
@function getSizedSelector($selector, $breakPointName) {
    @if($breakPointName=='default' or $breakPointName=='null' or $breakPointName=='') {
        @return '#{$selector}';
    }
    @else {
        @return '#{$selector}-#{$breakPointName}';
    }
}

@function breakpoint($breakPointName) {
    @return map-get(map-get($flexboy, breakpoints), $breakPointName);
}

// @mixin style($breakPointName, $styleMap) {
//     @if($breakPointName=="null" or $breakPointName=="default" or $breakPointName=="") {
//         $minWidth: 0px;
//     }
//     @else {
//         $minWidth: map-get($breakpoints, $breakPointName);
//     }
//     @media(min-width: $minWidth) {
//         @each $property,
//         $value in $styleMap {
//             $property: $value;
//         }
//     }
// }
// @include style(md, (width: 200px, height: 250px, border: solid 1px red));
@mixin gutter($amount, $breakPointName) {    
    @if($breakPointName=="null" or $breakPointName=="default" or $breakPointName=="") {
        $minWidth: 0px;
    }
    @else {
        $minWidth: map-get($breakpoints, $breakPointName);
    }
    @media(min-width: $minWidth) {
        padding: $amount / 2;
        &>* {
            margin: $amount / 2;
        }
    }
}
@mixin container($subtractPadding, $breakPointName) {
    @if($breakPointName=="null" or $breakPointName=="default" or $breakPointName=="") {
        $minWidth: 0px;
        $width: map-get($containers, "default");
    }
    @else {
        $minWidth: map-get($breakpoints, $breakPointName);
        $width: map-get($containers, $breakPointName);
    }
    @media(min-width: $minWidth) {
        margin-left: auto;
        margin-right: auto;
        max-width: $width;
        @if($subtractPadding !="null") {
            max-width: #{calc(#{$width} - #{$subtractPadding})
        }
        ;
    }
}

}

@mixin size($breakPointName,
$selectorList) {
    @each $selector in $selectorList {
        @extend %#{getSizedSelector(#{$selector},
        #{$breakPointName})
    }
    ;
}

}

@if(variable-exists(flexboy)) {
    $breakpoints: null;
    $containers: null;
    $disableDefaultMargins: false;
    $colors: null;
    $fonts: null;
    $zeroMap: (default: 0px);
    $breakpointMap: $zeroMap;
    $breakpoints: map-get($flexboy, breakpoints);
    $breakpointMap: map-merge($zeroMap, $breakpoints);
    $containers: map-get($flexboy, containers);
    $disableDefaultMargins: map-get($flexboy, disableDefaultMargins);
    $colors: map-get($flexboy, colors);
    $fonts: map-get($flexboy, fonts); // breakpoints and containers
    @if($breakpoints !=null) {
        $justifyStates: (start: flex-start, end: flex-end, center: center, between: space-between, around: space-around);
        $alignStates: (start: flex-start, end: flex-end, center: center, baseline: baseline, stretch: stretch);
        $directions: ('row', 'col', 'row-reverse', 'col-reverse');
        $wrapStates: (wrap, wrap-reverse, nowrap);
        @each $breakPointName,
        $breakPointSize in $breakpointMap {
            //container
            @if ($containers !=null) {
                %#{getSizedSelector('container', $breakPointName)} {
                    $breakPointIndex: index($breakpointMap, ($breakPointName $breakPointSize));
                    @for $i from $breakPointIndex to length($breakpointMap)+1 {
                        $containerWidth: nth(map_values($containers), $i);
                        @media(min-width: nth(map_values($breakpointMap), $i)) {
                            max-width: #{$containerWidth};
                            margin-left: auto;
                            margin-right: auto;
                        }
                    }
                }
            }
            @media(min-width: $breakPointSize) {
                //direction
                @each $direction in $directions {
                    %#{getSizedSelector($direction, $breakPointName)} {
                        display: flex;
                        $flex-dir: $direction;
                        @if($direction=='col') {
                            $flex-dir: 'column';
                        }
                        @if($direction=='col-reverse') {
                            $flex-dir: 'column-reverse';
                        }
                        flex-direction: #{$flex-dir};
                    }
                } //wrap
                @each $wrapState in $wrapStates {
                    @media(min-width: $breakPointSize) {
                        %#{getSizedSelector($wrapState, $breakPointName)

                    }
                        {
                        flex-wrap: $wrapState;
                    }
                }
            } //justify-content
            @each $name,
            $state in $justifyStates {
                %#{getSizedSelector(j-#{$name},
                $breakPointName)
            }
                {
                justify-content: $state;
            }
        } //align-items
        @each $name,
        $state in $alignStates {
            %#{getSizedSelector(a-#{$name},
            $breakPointName)
        }
            {
            align-items: $state;
        }
    } //fluid 
    %#{getSizedSelector('fluid', #{$breakPointName})
}

    {
    width: 100%;
}

}

$nextIndex: index($breakpointMap,
$breakPointName $breakPointSize)+1; //hide at a specific size
@if($nextIndex <=length($breakpointMap)) {
    $nextPx: nth(map_values($breakpointMap), $nextIndex);
    @media(min-width: $breakPointSize) {
        @media(max-width: $nextPx - 1px) {
            %#{getSizedSelector('hide', #{$breakPointName})
        }
            {
            display: none;
        }
    }
}

}

@else {
    @media(min-width: $breakPointSize) {
        %#{getSizedSelector('hide', #{$breakPointName})
    }
        {
        display: none;
    }
}

} //hide all other sizes
%#{getSizedSelector('only', #{$breakPointName})
}

    {
    @media(max-width: $breakPointSize - 1px) {
        display: none;
    }
    @if($nextIndex <=length($breakpointMap)) {
        $nextPx: nth($breakpointMap, $nextIndex);
        @media(min-width: $breakPointSize) {
            display: none;
        }
    }
}

}

}

//disableDefaultMargins
@if($disableDefaultMargins==true) {
    h1,
    h2,
    h3,
    h4,
    h5,
    h6,
    p,
    blockquote,
    dd,
    dl,
    fieldset,
    figure,
    hr,
    menu,
    ol,
    ul,
    body {
        // disable default browser margins
        margin: 0;
    }
}

//colors
@if($colors !=null) {
    @each $breakPointName,
    $breakPointSize in $breakpointMap {
        @media(min-width: $breakPointSize) {
            @each $name, $color in $colors {
                %#{getSizedSelector($name, #{$breakPointName})
            }
                {
                color: $color;
            }
            %#{getSizedSelector(#{$name}-bg,
            #{$breakPointName})
        }
            {
            background-color: $color;
        }
        %#{getSizedSelector(#{$name}-fill,
        #{$breakPointName})
    }
        {
        fill: $color;
    }
    %#{getSizedSelector(#{$name}-stroke,
    #{$breakPointName})
}

    {
    stroke: $color;
}

}

}

}

}

//sizes and line-heights
@each $breakPointName,
$breakPointSize in $breakpointMap {
    @media(min-width: $breakPointSize) {
        @for $size from 1 through 250 {
            %#{getSizedSelector(s-#{$size}, #{$breakPointName})
        }
            {
            font-size:#{$size}px;
        }
        %#{getSizedSelector(lh-#{$size},
        #{$breakPointName})
    }
        {
        line-height:#{$size}px;
    }
}

}

}

//fonts and weights
@if($fonts !=null) {
    @each $breakPointName,
    $breakPointSize in $breakpointMap {
        @media(min-width: $breakPointSize) {
            @each $fontName, $fontWeights in $fonts {
                @each $weight in $fontWeights {
                    %#{getSizedSelector(#{$fontName}-#{$weight}, #{$breakPointName})
                }
                    {
                    font-family: $fontName;
                    font-weight: $weight;
                }
            }
        }
    }
}

}

}

@else {
    @error('$flexboy variable must be defined!');
}