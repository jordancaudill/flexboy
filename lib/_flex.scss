// $flexboy: (md: 1280px, lg: 1600px);
@function getSizedSelector($selector, $breakPointName) {
    @if($breakPointName=='') {
        @return '#{$selector}';
    }
    @else {
        @return '#{$selector}-#{$breakPointName}';
    }
}

@if(variable-exists(flexboy)) {
$originMap: ('': 0px);
$breakPoints: map-merge($originMap, $flexboy);
$justifyStates: (start: flex-start,
end: flex-end,
center: center,
between: space-between,
around: space-around);
$alignStates: (start: flex-start,
end: flex-end,
center: center,
baseline: baseline,
stretch: stretch);
$directions: ('row',
'col',
'row-reverse',
'col-reverse');
$wrapStates: (wrap,
wrap-reverse,
nowrap);

// @mixin gutter($breakPointName, $amount) {
//     @media(min-width: nth($breakPoints, index($breakPoints, $breakPointName)) ) {
//         padding: $amount / 2;
//         &>* {
//             margin: $amount / 2;
//         }
//     }
// }

// @mixin setDefaultContainers($args...) {
    
// }

// @mixin container($breakPointName, $width, $subtractPadding: "null") {
//     @media(min-width: nth($breakPoints, index($breakPoints, $breakPointName)) ) {
//         max-width: $width;
//         @if($subtractPadding !="null") {
//             max-width: #{calc(#{$width} - #{$subtractPadding})
//         }
//         ;
//     }
//     margin-left: auto;
//     margin-right: auto;
// }

// }

// container and fluid
// @each $breakPointName, $breakPointSize in $breakPoints {
//     //container
//     %#{getSizedSelector('container', $breakPointName)} {
//         $breakPointNameIndex: index($breakPoints, ($breakPointName $breakPointSize));
//         @for $i from $breakPointNameIndex to length($breakPoints)+1 {
//             $containerWidth: nth($containerWidths, $i);
//             @media(min-width: nth($breakPoints, $i) ) {
//                 max-width: #{$containerWidth}px;
//                 margin-left: auto;
//                 margin-right: auto;
//             }
//         }
//     } //fluid
//     @media(min-width: $breakPointSize ) {
//         %#{getSizedSelector('fluid', #{$breakPointName})
//     }
//         {
//         max-width: 100%;
//     }
// }

// }

//wrap
@each $breakPointName, $breakPointSize in $breakPoints {
    @each $wrapState in $wrapStates {
		@media(min-width: $breakPointSize ) {
            %#{getSizedSelector(#{$wrapState}, #{$breakPointName})
        }
            {
            flex-wrap: $wrapState;
        }
    }
}

}
//flex-direction
@each $breakPointName, $breakPointSize in $breakPoints {
	@debug(index($breakPoints, ($breakPointName $breakPointSize)));
    @media(min-width: $breakPointSize ) {
        @each $direction in $directions {
            %#{getSizedSelector($direction, $breakPointName)} {
                display: flex;
                $flex-dir: $direction;
                @if($direction=='col') {
                    $flex-dir: 'column';
                }
                @if($direction=='col-reverse') {
                    $flex-dir: 'column-reverse';
                }
                flex-direction: #{$flex-dir};
            }
        }
    }
}

//justify-content
@each $breakPointName, $breakPointSize in $breakPoints {
    @media(min-width: $breakPointSize ) {
        @each $name, $state in $justifyStates {
            %#{getSizedSelector(j-#{$name}, $breakPointName)
        }
            {
            justify-content: $state;
        }
    }
}

}

//align-items
@each $breakPointName, $breakPointSize in $breakPoints {
    @media(min-width: $breakPointSize ) {
        @each $name, $state in $alignStates {
            %#{getSizedSelector(a-#{$name}, $breakPointName)
        }
            {
            align-items: $state;
        }
    }
}

}

//hide at a size or greater
@each $breakPointName, $breakPointSize in $breakPoints {
    @media(min-width: $breakPointSize ) {
        %#{getSizedSelector('hide', #{$breakPointName})
    }
        {
        display: none;
    }
}

}

//hide at a specific size
@each $breakPointName, $breakPointSize in $breakPoints {
    $nextIndex: index($breakPoints, $breakPointName $breakPointSize)+1;
    @if($nextIndex <=length($breakPoints)) {
        $nextPx: nth($breakPoints, $nextIndex);
		@media(min-width: $breakPointSize ) {
            @media(max-width: $nextPx - 1px) {
                %#{getSizedSelector('hide-at', #{$breakPointName})
            }
                {
                display: none;
            }
        }
    }
}

@else {
    @media(min-width: $breakPointSize ) {
        %#{getSizedSelector('hide-at', #{$breakPointName})
    }
        {
        display: none;
    }
}

}

}

//show at a size or greater
@each $breakPointName, $breakPointSize in $breakPoints {
    @media(min-width: $breakPointSize ) {
        %#{getSizedSelector('show', #{$breakPointName})
    }
        {
        display: initial;
    }
}

}

//show at a specific size
@each $breakPointName, $breakPointSize in $breakPoints {
    $nextIndex: index($breakPoints, $breakPointName $breakPointSize)+1;
    @if($nextIndex <=length($breakPoints)) {
        $nextPx: nth($breakPoints, $nextIndex);
		@media(min-width: $breakPointSize ) {
            @media(max-width: $nextPx - 1px) {
                %#{getSizedSelector('show-at', #{$breakPointName})
            }
                {
                display: initial;
            }
        }
    }
}

@else {
    @media(min-width: $breakPointSize ) {
        %#{getSizedSelector('show-at', #{$breakPointName})
    }
        {
        display: initial;
    }
}

}

}

// display: flex
@each $breakPointName, $breakPointSize in $breakPoints {
    @media(min-width: $breakPointSize ) {
        %#{getSizedSelector('flex', $breakPointName)} {
            display: flex;
        }
    }
}

//flex at a specific size
@each $breakPointName, $breakPointSize in $breakPoints {
    $nextIndex: index($breakPoints, $breakPointName $breakPointSize)+1;
    @if($nextIndex <=length($breakPoints)) {
        $nextPx: nth($breakPoints, $nextIndex);
		@media(min-width: $breakPointSize ) {
            @media(max-width: $nextPx - 1px) {
                %#{getSizedSelector('flex-at', #{$breakPointName})
            }
                {
                display: flex;
            }
        }
    }
}

@else {
    @media(min-width: $breakPointSize ) {
        %#{getSizedSelector('flex-at', #{$breakPointName})
    }
        {
        display: flex;
    }
}

}

}

//hide all other sizes
@each $breakPointName, $breakPointSize in $breakPoints {
    $nextIndex: index($breakPoints, $breakPointName $breakPointSize)+1;
    %#{getSizedSelector('only', #{$breakPointName})
}

    {
    @media(max-width: $breakPointSize - 1px) {
        display: none;
    }
    @if($nextIndex <=length($breakPoints)) {
        $nextPx: nth($breakPoints, $nextIndex);
		@media(min-width: $breakPointSize ) {
            display: none;
        }
    }
}

}
} @else {
	@error('$flexboy variable must be defined!');
}
