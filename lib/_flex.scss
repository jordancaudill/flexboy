@function getSizedSelector($selector, $breakPointName) {
    @if($breakPointName=='') {
        @return '#{$selector}';
    }
    @else {
        @return '#{$selector}-#{$breakPointName}';
    }
}

@mixin gutter($breakPointName, $amount) {
    @media(min-width: nth($breakPoints, index($breakPointNames, $breakPointName)) + 'px') {
        padding: $amount / 2;
        &>* {
            margin: $amount / 2;
        }
    }
}

@mixin setDefaultContainers($args...) {
    
}

@mixin container($breakPointName, $width, $subtractPadding: "null") {
    @media(min-width: nth($breakPoints, index($breakPointNames, $breakPointName)) + 'px') {
        max-width: $width;
        @if($subtractPadding !="null") {
            max-width: #{calc(#{$width} - #{$subtractPadding})
        }
        ;
    }
    margin-left: auto;
    margin-right: auto;
}

}

@if(length($breakPoints) !=length($breakPointNames) or length($breakPoints) !=length($containerWidths)) {
    @error 'Your breakPoints, breakPointNames, and containerWidths arguments must all be the same length';
}

$justifyStates: (start: flex-start,
end: flex-end,
center: center,
between: space-between,
around: space-around);
$alignStates: (start: flex-start,
end: flex-end,
center: center,
baseline: baseline,
stretch: stretch);
$directions: ('row',
'col',
'row-reverse',
'col-reverse');
$wrapStates: (wrap,
wrap-reverse,
nowrap);
//container and fluid
@each $breakPointName in $breakPointNames {
    //container
    .#{getSizedSelector('container', $breakPointName)} {
        $breakPointNameIndex: index($breakPointNames, $breakPointName);
        @for $i from $breakPointNameIndex to length($breakPointNames)+1 {
            $containerWidth: nth($containerWidths, $i);
            @media(min-width: nth($breakPoints, $i) + 'px') {
                max-width: #{$containerWidth}px;
                margin-left: auto;
                margin-right: auto;
            }
        }
    } //fluid
    @media(min-width: nth($breakPoints, index($breakPointNames, $breakPointName))+'px') {
        .#{getSizedSelector('fluid', #{$breakPointName})
    }
        {
        max-width: 100%;
    }
}

}

//wrap
@each $breakPointName in $breakPointNames {
    @each $wrapState in $wrapStates {
        @media(min-width: nth($breakPoints, index($breakPointNames, $breakPointName))+'px') {
            .#{getSizedSelector(#{$wrapState}, #{$breakPointName})
        }
            {
            flex-wrap: $wrapState;
        }
    }
}

}

//flex-direction
@each $breakPointName in $breakPointNames {
    @media(min-width: nth($breakPoints, index($breakPointNames, $breakPointName)) + 'px') {
        @each $direction in $directions {
            .#{getSizedSelector($direction, $breakPointName)} {
                display: flex;
                $flex-dir: $direction;
                @if($direction=='col') {
                    $flex-dir: 'column';
                }
                @if($direction=='col-reverse') {
                    $flex-dir: 'column-reverse';
                }
                flex-direction: #{$flex-dir};
            }
        }
    }
}

//justify-content
@each $breakPointName in $breakPointNames {
    @media(min-width: nth($breakPoints, index($breakPointNames, $breakPointName)) + 'px') {
        @each $name, $state in $justifyStates {
            .#{getSizedSelector(j-#{$name}, $breakPointName)
        }
            {
            justify-content: $state;
        }
    }
}

}

//align-items
@each $breakPointName in $breakPointNames {
    @media(min-width: nth($breakPoints, index($breakPointNames, $breakPointName)) + 'px') {
        @each $name, $state in $alignStates {
            .#{getSizedSelector(a-#{$name}, $breakPointName)
        }
            {
            align-items: $state;
        }
    }
}

}

//hide at a size or greater
@each $breakPointName in $breakPointNames {
    @media(min-width: nth($breakPoints, index($breakPointNames, $breakPointName)) + 'px') {
        .#{getSizedSelector('hide', #{$breakPointName})
    }
        {
        display: none;
    }
}

}

//hide at a specific size
@each $breakPointName in $breakPointNames {
    $nextIndex: index($breakPointNames, $breakPointName)+1;
    @if($nextIndex <=length($breakPointNames)) {
        $nextPx: nth($breakPoints, $nextIndex);
        @media(min-width: nth($breakPoints, index($breakPointNames, $breakPointName)) + 'px') {
            @media(max-width: $nextPx - 1px) {
                .#{getSizedSelector('hide-at', #{$breakPointName})
            }
                {
                display: none;
            }
        }
    }
}

@else {
    @media(min-width: nth($breakPoints, index($breakPointNames, $breakPointName)) + 'px') {
        .#{getSizedSelector('hide-at', #{$breakPointName})
    }
        {
        display: none;
    }
}

}

}

//show at a size or greater
@each $breakPointName in $breakPointNames {
    @media(min-width: nth($breakPoints, index($breakPointNames, $breakPointName)) + 'px') {
        .#{getSizedSelector('show', #{$breakPointName})
    }
        {
        display: initial;
    }
}

}

//show at a specific size
@each $breakPointName in $breakPointNames {
    $nextIndex: index($breakPointNames, $breakPointName)+1;
    @if($nextIndex <=length($breakPointNames)) {
        $nextPx: nth($breakPoints, $nextIndex);
        @media(min-width: nth($breakPoints, index($breakPointNames, $breakPointName)) + 'px') {
            @media(max-width: $nextPx - 1px) {
                .#{getSizedSelector('show-at', #{$breakPointName})
            }
                {
                display: initial;
            }
        }
    }
}

@else {
    @media(min-width: nth($breakPoints, index($breakPointNames, $breakPointName)) + 'px') {
        .#{getSizedSelector('show-at', #{$breakPointName})
    }
        {
        display: initial;
    }
}

}

}

// display: flex
@each $breakPointName in $breakPointNames {
    @media(min-width: nth($breakPoints, index($breakPointNames, $breakPointName)) + 'px') {
        .#{getSizedSelector('flex', $breakPointName)} {
            display: flex;
        }
    }
}

//flex at a specific size
@each $breakPointName in $breakPointNames {
    $nextIndex: index($breakPointNames, $breakPointName)+1;
    @if($nextIndex <=length($breakPointNames)) {
        $nextPx: nth($breakPoints, $nextIndex);
        @media(min-width: nth($breakPoints, index($breakPointNames, $breakPointName)) + 'px') {
            @media(max-width: $nextPx - 1px) {
                .#{getSizedSelector('flex-at', #{$breakPointName})
            }
                {
                display: flex;
            }
        }
    }
}

@else {
    @media(min-width: nth($breakPoints, index($breakPointNames, $breakPointName)) + 'px') {
        .#{getSizedSelector('flex-at', #{$breakPointName})
    }
        {
        display: flex;
    }
}

}

}

//hide all other sizes
@each $breakPointName in $breakPointNames {
    $nextIndex: index($breakPointNames, $breakPointName)+1;
    .#{getSizedSelector('only', #{$breakPointName})
}

    {
    @media(max-width: nth($breakPoints, index($breakPointNames, $breakPointName)) - 1px) {
        display: none;
    }
    @if($nextIndex <=length($breakPointNames)) {
        $nextPx: nth($breakPoints, $nextIndex);
        @media(min-width: nth($breakPoints, index($breakPointNames, $breakPointName)) + 'px') {
            display: none;
        }
    }
}

}